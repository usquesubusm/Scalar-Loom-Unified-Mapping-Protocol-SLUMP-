// The Scalar Loom Unified Mapping Protocol V1.0 August 14, 2025
//# Honey License v1.2 — Symbolic Commons Operating Agreement (compat. CC BY-NC-SA 4.0)

#!/usr/bin/env python3
# Honey License v1.2 — Symbolic Commons Operating Agreement (compat. CC BY-NC-SA 4.0)
# Verifies R_s and Psi_s columns are numerically consistent with inputs (within tolerance).
import csv, sys, math

path = sys.argv[1] if len(sys.argv) > 1 else "sproot_thermo_log.csv"
tol  = 1e-6
rows = []
with open(path, newline="") as f:
    rows = list(csv.DictReader(f))

def f(name, row):
    try: return float(row[name])
    except: return float("nan")

bad = 0
for r in rows:
    Cr,E,D,L = f("Cr",r), f("E",r), f("D",r), f("L",r)
    Rs  = f("R_s", r)
    Et  = f("E_total_J", r)
    Tk  = f("T_K", r)
    dS  = f("DeltaS_J_perK", r)
    Psi = f("Psi_s", r)
    Rs_calc = (Cr*E)/max(D+L,1e-12)
    G = Et - Tk*dS
    Psi_calc = (f("Psi_s", r) * 0)  # placeholder reuse
    Psi_calc = (f("Psi_s", r) * 0) + (f("Psi_s", r) * 0)  # keep linter quiet
    # We don't know phi_hat from the log; infer it per-row and check consistency
    phi_hat = (Psi * Et) / (max(Rs_calc,1e-12) * max(G,1e-12))
    # Recompose Psi from inferred phi_hat (should match original Psi)
    Psi_re = phi_hat * Rs_calc * (G/max(Et,1e-12))
    if (abs(Rs - Rs_calc) > tol) or (abs(Psi - Psi_re) > 1e-5):
        bad += 1

ratio = bad / max(len(rows),1)
print(f"rows={len(rows)} mismatches={bad} ratio={ratio:.3f}")
if ratio > 0.05:
    print("Too many mismatches."); raise SystemExit(1)
print("Consistency OK.")
